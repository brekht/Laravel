<?php

/* Create by Xenial */

# Содержит Глобальные Хелперы - для всего Проекта

/* ⚑
 * --------------------------------------------------------------------------
 * Для того чтобы подключить данный файл, потребуется прописать его в composer.json
 *
 * Before: ··································································
 *  "autoload": {
 *      "classmap": [
 *          "database/seeds",
 *          "database/factories"
 *      ],
 *      "psr-4": {
 *          "App\\": "app/"
 *      },
 *  },
 *
 * After: ···································································
 *  "autoload": {
 *      "classmap": [
 *          "database/seeds",
 *          "database/factories"
 *      ],
 *      "psr-4": {
 *          "App\\": "app/"
 *      },
 *      "files": [
 *        "app/helpers.php"
 *      ]
 *  },
 *
 * --------------------------------------------------------------------------
 *
 *
 *
 *
 */

# правильным форматом в Laravel  - является формат, что прежде чем делать какой-то Пользовательский Метод (новый, Глобальный)
# его нужно проверить - что данного Метода ещё не существует (опять же в Глобальной области видимости) в системе (в проекте)
# если Метода в системе нет, мы его создаём

# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

if(!function_exists('_methodName')){

    function _methodName(int $var){

    }
}

# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

if(!function_exists('_user')){

    # Хелпер принимает id Пользователя
    function _user($user_id)
    {
        # Возвращает Объект Пользователя по его id
        $objUser = \App\Models\User::find($user_id);
        if(!$objUser) {
            # Если Пользователь не найден по id, прекращаем выполнение кода, выводим 404
            return abort(404);
        }
        # Возвращаем Объект с Пользователем
        return $objUser;
    }
}

# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

if(!function_exists('_article')){

    # Хелпер принимает id Статьи
    function _article($article_id)
    {
        # Возвращает Объект Статьи по её id
        $objArticle = \App\Models\Article::find($article_id);
        if(!$objArticle) {
            # Если Статья не найдена по id, прекращаем выполнение кода, выводим 404
            return abort(404);
        }
        # Возвращаем Объект со Статьей
        return $objArticle;
    }
}

# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

if(!function_exists('_category')){

    # Хелпер принимает id Категории
    function _category($category_id)
    {
        # Возвращает Объект Категории по её id
        $objCategory = \App\Models\Category::find($category_id);
        if(!$objCategory) {
            # Если Категория не найдена по id, прекращаем выполнение кода, выводим 404
            return abort(404);
        }
        # Возвращаем Объект Категории
        return $objCategory;
    }
}

# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

if(!function_exists('_comment')){

    # Хелпер принимает id Комментария
    function _comment($comment_id)
    {
        # Возвращает Объект Комментария по его id
        $objComment = \App\Models\Comment::find($comment_id);
        if(!$objComment) {
            # Если Комментарий не найден по id, прекращаем выполнение кода, выводим 404
            return abort(404);
        }
        # Возвращаем Объект Комментария
        return $objComment;
    }
}

# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

if(!function_exists('_essence')){

    # Хелпер принимает id Сущности
    function _essence($essence_id)
    {
        # Возвращает Объект Сущности по id
        $objEssence = \App\Models\Essence::find($essence_id);
        if(!$objEssence) {
            # Если Сущность не найден по id, прекращаем выполнение кода, выводим 404
            return abort(404);
        }
        # Возвращаем Объект Сущности
        return $objEssence;
    }
}

# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

if(!function_exists('_randImgName')){

    # Хелпер - формирует рандомное имя для загружаемой картинки
    # для того, чтобы все имена были одинаковой длины (25 символов), и примерного формата именования
    function _randImgName()
    {
        $alphabet = [   1 => 'a', 2 => 'b', 3 => 'c', 4 => 'd', 5 => 'e', 6 => 'f',
                        7 => 'g', 8 => 'h', 9 => 'i', 10 => 'j', 11 => 'k', 12 => 'l',
                        13 => 'm', 14 => 'n', 15 => 'o', 16 => 'p', 17 => 'q', 18 => 'r',
                        19 => 's', 20 => 't', 21 => 'u', 22 => 'v', 23 => 'w', 24 => 'x',
                        25 => 'y', 26 => 'z', 27 => '1', 28 => '2', 29 => '3', 30 => '4',
                        31 => '5', 32 => '6', 33 => '7', 34 => '8', 35 => '9', 36 => '0'
        ];

        $save_name = '';

        for($i=1; $i<=25; $i++){
            $save_name = $save_name . $alphabet[rand(1, 36)];
        }

        # Проверим, уникально ли созданное имя (хотя вероятнее всего в 99% случаев, так и будет) --------------------

            # Выбираем все записи `img` из Таблицы `img_property`
            $objImg = DB::table('img_property')->select('img')->get();

            # Формируем простой Массив имён изображений, которые уже сохранены на сервере
            $imagesArray = array();
            foreach($objImg as $img){
                # уберём расширение и точку
                $image = substr($img->img, 0, 25);
                # Добавляем в массив
                array_push($imagesArray, $image);
            }

            # Проверим, уникально ли созданное имя изображения (используем рекурсию - если не уникально)
            if (in_array($save_name, $imagesArray)) {
                _randImgName();
            }

        # -----------------------------------------------------------------------------------------------------------

        # Возвращает сгенерированную рандомную последовательность букв и цифр, длинной 25 символов,
        # например: vpyi3rv94o4ew7rz6iikmjvuc
        return $save_name;
    }
}

# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::